     * Class Board
	 * 
	 * 		dimension <-- dimension of the board (2 or 3)
	 * 		configuration <-- 2-dimensional array - the configuration of the board
	 * 		answer1 = 0 <-- Number of available edges
	 * 		answer2 <-- Number of hexagons that can be captured with one move
	 * 		answer3 <-- Max number of hexagons that can be captured with one move
	 * 		availableEdges <-- lists all edges that are available on the board
	 * 
	 * 		METHOD stateCheck()
	 * 		
	 * 			FOR each layer of the board
	 * 
	 * 				FOR each edge in the current layer
	 * 
	 * 					IF the edge is available
	 * 						answer1++
	 * 					END IF
	 * 
	 * 				END FOR
	 * 
	 * 			END FOR
	 * 	
	 * 			LSPX = 0 <-- x coordinate of first hexagon in current layer 
	 * 			LSPY = 0 <-- y coordinate of first hexagon in current layer
	 * 			HSPX = 0 <-- x coordinate of top left edge of current hexagon
	 * 			HSPY = 0 <-- y coordinate of top left edge of current hexagon
	 * 			PLUSNUM = 0 <-- judge if current hexagon can be captured with one move
	 * 
	 * 			FOR each layer in the top half of board (layer 1 - N)
	 * 		
	 * 				Calculate LSPX
	 * 				HSPX <-- LSPX
	 * 	
	 * 				FOR each hexagon in the current layer
	 * 				
	 * 					Calculate HSPY
	 * 					PLUSNUM <-- 0
	 * 				
	 * 					GO THROUGH EACH EDGE OF THE CURRENT HEXAGON [ [HSPX][HSPY]->[HSPX][HSPY+1]->[HSPX+1][HSPY]->[HSPX+1][HSPY+2]->[HSPX+2][HSPY+1]->[HSPX+2][HSPY+2] ]
	 * 
	 * 					IF any of the current hexagon's edges are available
	 * 
	 * 						IF PLUSNUM == 0
	 * 							Add current edge to availableEdges
	 * 							PLUSNUM++
	 * 						END IF
	 * 
	 * 						ELSE
	 * 							Remove last edge that was added to availableEdges
	 * 							CONTINUE with next hexagon in current layer
	 * 						END ELSE
	 * 
	 * 					END IF
	 * 				
	 * 					IF PLUSNUM == 1
	 * 						answer3++
	 * 					END IF
	 * 
	 * 	  			END FOR
	 * 	
	 * 			END FOR
	 * 
	 * 			FOR each layer in the bottom half of the board (layer N+1 - 2N-1)
	 * 
	 * 				Calculate HSPX
	 * 				Calculate LSPY
	 * 
	 * 				FOR each hexagon in the current layer
	 * 
	 * 					Calculate HSPY
	 * 					PLUSNUM <-- 0
	 * 
	 * 					GO THROUGH EACH EDGE OF THE CURRENT HEXAGON [ [HSPX][HSPY]->[HSPX][HSPY+1]->[HSPX+1][HSPY]->[HSPX+1][HSPY+2]->[HSPX+2][HSPY+1]->[HSPX+2][HSPY+2] ]
	 * 
	 * 					IF any of the current hexagon's edges are available
	 * 						IF PLUSNUM == 0
	 * 							Add current edge to availableEdges
	 * 							PLUSNUM++
	 * 						END IF
	 * 						ELSE
	 * 							Remove last edge that was added to availableEdges
	 * 							CONTINUE with next hexagon in current layer
	 * 						END ELSE
	 * 					END IF
	 * 				
	 * 					IF PLUSNUM == 1
	 * 						answer3++
	 * 					END IF
	 * 	
	 * 				END FOR
	 * 
	 * 			END FOR
	 * 
	 * 			IF answer3 == 0
	 * 				answer2 <-- 0
	 * 			END IF
	 * 			ELSE
	 * 				MAXTWO <-- FALSE <--judges if it is possible to capture 2 hexagons with 1 move
	 * 			
	 * 				FOR each edge in availableEdges
	 * 
	 * 					s <-- holds current edge
	 * 					Remove s from availableEdges
	 * 					
	 * 					IF availableEdges contains s
	 * 						MAXTWO <-- TRUE
	 * 						BREAK
	 * 					END IF
	 * 
	 * 				END FOR
	 * 			
	 * 				IF MAXTWO == TRUE
	 * 					answer2 <-- 2
	 * 				END IF
	 * 
	 * 				ELSE
	 * 					answer2 <-- 1
	 * 				END ELSE
	 * 
	 * 			END ELSE
	 * 			
	 * 		END METHOD stateCheck()
	 * 						
	 * 		MAIN METHOD
	 * 
	 * 		Create new Board board
	 * 		
	 * 		TRY
	 * 			d <-- read board dimension input (2 or 3)
	 * 			
	 * 			IF d == 2
	 * 				dimension <-- 2
	 * 				Make board configuration
	 * 			END IF
	 * 			
	 * 			ELSE IF d == 3
	 * 				dimension <-- 3
	 * 				Make board configuration
	 * 			END ESLE IF
	 * 			
	 * 			ELSE
	 * 				EXIT program
	 * 			END ELSE
	 * 
	 * 			d <-- read board configuration
	 * 			
	 * 			input <-- List of characters [+, -, R, B]
	 * 
	 * 			WHILE d != -1
	 * 				
	 * 				IF d == + or - or R or B
	 * 					Add d to input
	 * 					Read next
	 * 				END IF
	 * 
	 * 				ELSE
	 * 					Read next
	 * 				END ELSE
	 * 
	 * 			END WHILE
	 * 
	 * 			IF input is not the size of the board configuration
	 * 				EXIT program
	 *			END IF
	 * 				
	 * 			FOR each layer of the board
	 * 				
	 * 				FOR each edge in the current layer
	 * 
	 * 					Fill the edge with the corresponding edge in the input configuration
	 * 
	 * 				END FOR
	 * 
	 * 			END FOR
	 * 
	 * 			FOR each layer of the board
	 * 				
	 * 				FOR each edge in the current layer
	 * 
	 * 					PRINT the edge of the board configuration
	 * 
	 * 				END FOR
	 * 
	 * 			END FOR
	 * 
	 * 			CALL METHOD stateCheck()
	 * 
	 * 			PRINT answer1
	 * 			PRINT answer2
	 * 			PRINT answer3
	 * 
	 * 		END TRY
	 * 
	 * 		CATCH exception
	 * 
	 *			EXIT program
	 *		
	 *		END CATCH
	 *
	 *	END MAIN METHOD